Refer to the problem statements here->https://www.codechef.com/IEMCO16/problems/TE3N/
//Solution_team_Aurors
    #include <iostream>
    #include<string>
    using namespace std;
     
    struct Node
    {
        char data;
        Node* next;
    };
     
    Node* head=NULL;
    Node* tail=NULL;
     
    void Insert(char data);
    void Print();
    int check();
     
    int main()
    {
        int n, t;
        cin>>n;
        for(int t=0; t<n; t++)
        {
            head=NULL;
            string s;
            cin>>s;
            for(int i=0; i<s.length(); i++)
            {
                Insert(s[i]);
            }
            if(check())
            {
                cout<<"Yes"<<endl;
            }
            else
            {
                cout<<"No"<<endl;
            }
        }
        return 0;
    }
     
    void Insert(char data)
    {
        if(head==NULL)
        {
            Node* temp=new (struct Node);
            temp->data=data;
            temp->next=NULL;
            head=temp;
            tail=temp;
        }
        else
        {
            Node* temp=new (struct Node);
            temp->data=data;
            temp->next=NULL;
            tail->next=temp;
            tail=temp;
        }
    }
     
    int check()
    {
        Node* c=head;
        Node* cn=head->next;
        Node* cnn=cn->next;
        Node* prev=head;
        
        int f=1;
        while(f==1)
        {
            f=0;
            c=head;
            prev=head;
            if(c!=NULL)
            {
                cn=c->next;
                if(cn!=NULL)
                {
                    cnn=cn->next;
                }
            }
            while(c!=NULL && cn!=NULL && cnn!=NULL)
            {
                if(c->data=='I' && cn->data=='E' && cnn->data=='M')
                {
                    if(c==head)
                    {
                        head=cnn->next;
                        prev=head;
                    }
                    else
                    {
                        prev->next=cnn->next;
                    }
                    c=cnn->next;
                    if(c!=NULL)
                    {
                        cn=c->next;
                        if(cn!=NULL)
                        {
                            cnn=cn->next;
                        }
                    }
                    f=1;
                }
                else
                {
                    prev=c;
                    c=c->next;
                    cn=cn->next;
                    cnn=cnn->next;
                }
            }
        }
        if(head==NULL)
        {
            return 1;
        }
        return 0;
    }
